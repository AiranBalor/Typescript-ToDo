{"version":3,"sources":["components/Navbar.tsx","pages/AboutPage.tsx","components/ConfirmPopup.tsx","components/TodoForm.tsx","components/TodoList.tsx","pages/TodosPage.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","href","to","AboutPage","history","useHistory","onClick","push","ConfirmPopup","isOpen","onDelete","onClose","type","TodoForm","props","ref","useRef","onKeyDown","event","key","onAdd","current","value","id","placeholder","htmlFor","TodoList","todos","onToggle","onConfirm","length","map","todo","classes","completed","join","checked","onChange","bind","title","preventDefault","confirmHandler","TodosPage","useState","setTodos","confirmPopupOpen","setConfirmPopupOpen","selectedTodo","setSelectedTodo","closeByESC","closePopup","useEffect","document","addEventListener","removeEventListener","savedTodos","JSON","parse","localStorage","getItem","setItem","stringify","removeHandler","prevState","filter","undefined","newTodo","Date","now","setSelectedTask","App","component","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ced24951.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar: React.FC = () => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper blue px1\">\r\n        <a href=\"/\" className=\"brand-logo\">\r\n          Learn Typescript\r\n        </a>\r\n        <ul className=\"right hide-on-med-and-down\">\r\n          <li>\r\n            <NavLink to=\"/\">Главная</NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/about\">О странице</NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst AboutPage: React.FC = () => {\r\n  \r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"about-container\">\r\n      <h1>Привет! Меня зовут Илья, я фронтенд-разработчик. Этот проект - мой первый опыт разработки на TypeScript: \r\n      я использовал интерфейсы, кастомные типы и дженерик-типы для создания React-компонентов.</h1>\r\n      <button className=\"btn center\" onClick={() => history.push('/')}>Назад к задачам</button>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default AboutPage\r\n","import React from \"react\";\r\n\r\ninterface IConfirmPopup {\r\n  isOpen: boolean;\r\n  onDelete: () => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst ConfirmPopup: React.FC<IConfirmPopup> = ({ isOpen, onDelete, onClose }) => {\r\n  return (\r\n    <div className={`overlay ${isOpen ? \"overlay_opened\" : \"\"}`}>\r\n      <div\r\n        className=\"popup-container\"\r\n      >\r\n        <h1>Вы уверены, что хотите удалить задачу?</h1>\r\n        <button type=\"submit\" onClick={onDelete} className=\"btn popup-container__confirm\">\r\n          Удалить\r\n        </button>\r\n        <i className=\"material-icons popup-container__close white-text\" onClick={onClose}>close</i>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfirmPopup;\r\n","import React, { useRef } from \"react\";\r\n\r\ninterface ITodoForm {\r\n  onAdd(title: string): void;\r\n}\r\n\r\nconst TodoForm: React.FC<ITodoForm> = (props) => {\r\n  //TS будет требовать указания типа данных стейта, а также элемента HTML, из которого будет получено состояние или реф\r\n  const ref = useRef<HTMLInputElement>(null);\r\n\r\n  //Аналогично, требуется указывать тип event. ! в current необходим, чтобы TS не выдавал ошибку о том, что current может быть\r\n  //null, как в начальном состоянии\r\n  const onKeyDown = (event: React.KeyboardEvent) => {\r\n    if (event.key === \"Enter\") {\r\n      props.onAdd(ref.current!.value);\r\n      ref.current!.value = \"\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"input-field mt2\">\r\n      <input\r\n        ref={ref}\r\n        onKeyDown={onKeyDown}\r\n        id=\"title\"\r\n        type=\"text\"\r\n        placeholder=\"Введите название\"\r\n      />\r\n      <label htmlFor=\"title\" className=\"active\">\r\n        Название задачи\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport { ITodo } from \"./interfaces\";\r\n// Два синтаксиса записи функций в интерфейсах. Идентичны друг другу.\r\ntype TodoListProps = {\r\n  todos: ITodo[];\r\n  onToggle(id: number): void;\r\n  onConfirm: (event:React.MouseEvent, id: number) => void;\r\n};\r\n\r\nconst TodoList: React.FC<TodoListProps> = ({ todos, onToggle, onConfirm }) => {\r\n  if (todos.length === 0) {\r\n    return <p className=\"center\">Дел пока нет!</p>\r\n  }\r\n\r\n  const confirmHandler = (event: React.MouseEvent, id: number ) => {\r\n    event.preventDefault();\r\n    onConfirm(event, id);\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {todos.map((todo) => {\r\n        const classes = [\"todo\"];\r\n        if (todo.completed) {\r\n          classes.push(\"completed\");\r\n        }\r\n        //Обрати внимание на способы вызова функций в обработчиках событий - либо стрелочный коллбек, либо метод bind на функции \r\n        //(null - потому что контекст в данном случае не нужен)\r\n        return (\r\n          <li className={classes.join(\" \")} key={todo.id}>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={todo.completed}\r\n                onChange={onToggle.bind(null, todo.id)}\r\n              />\r\n              <span>{todo.title}</span>\r\n              <i\r\n                className=\"material-icons red-text\"\r\n                onClick={(event) => confirmHandler(event, todo.id)}\r\n              >\r\n                delete\r\n              </i>\r\n            </label>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ConfirmPopup from \"../components/ConfirmPopup\";\r\nimport { ITodo, ISelectedTask } from \"../components/interfaces\";\r\nimport TodoForm from \"../components/TodoForm\";\r\nimport TodoList from \"../components/TodoList\";\r\n\r\n//поскольку TS не знает, что такое браузерный метод confirm, требуется явно указывать, у какого объекта метод следует искать(в данном случае window)\r\n//альтернативный способ - объявить переменную через declare:\r\n// declare var confirm: (question: string) => boolean;\r\n\r\nconst TodosPage: React.FC = () => {\r\n  const [todos, setTodos] = useState<ITodo[]>([]);\r\n  const [confirmPopupOpen, setConfirmPopupOpen] = useState<boolean>(false);\r\n  const [selectedTodo, setSelectedTodo] = useState<ISelectedTask>();\r\n\r\n  const closeByESC = (event: KeyboardEvent) => {\r\n    if (event.key === \"Escape\") {\r\n      return closePopup();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', closeByESC)\r\n\r\n    return () => {\r\n      document.removeEventListener('keydown', closeByESC)\r\n      }\r\n    }\r\n  )\r\n\r\n  useEffect(() => {\r\n    const savedTodos = JSON.parse(\r\n      localStorage.getItem(\"todos\") || \"[]\"\r\n    ) as ITodo[];\r\n    setTodos(savedTodos);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  const addToDo = (title: string) => {\r\n    const newTodo: ITodo = {\r\n      title: title,\r\n      id: Date.now(),\r\n      completed: false,\r\n    };\r\n\r\n    setTodos((prevState) => [...prevState, newTodo]);\r\n  };\r\n\r\n  const toggleHandler = (id: number) => {\r\n    setTodos((prevState) =>\r\n      prevState.map((todo) => {\r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            completed: !todo.completed,\r\n          };\r\n        }\r\n        return todo;\r\n      })\r\n    );\r\n  };\r\n\r\n  const setSelectedTask = (id: number) => {\r\n    setSelectedTodo((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        id: id,\r\n      };\r\n    });\r\n  };\r\n\r\n  const onDelete = () => {\r\n    removeHandler(selectedTodo!.id);\r\n    setConfirmPopupOpen((prevState) => (prevState = false));\r\n  };\r\n\r\n  const confirmDeletion = (event: React.MouseEvent, id: number) => {\r\n    setConfirmPopupOpen((prevState) => (prevState = true));\r\n    setSelectedTask(id);\r\n  };\r\n\r\n  const removeHandler = (id: number) => {\r\n    setTodos((prevState) => prevState.filter((todo) => todo.id !== id));\r\n    setSelectedTodo(undefined);\r\n  };\r\n\r\n  const closePopup = () => {\r\n    setConfirmPopupOpen((prevState) => (prevState = false));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TodoForm onAdd={addToDo}></TodoForm>\r\n      <TodoList\r\n        todos={todos}\r\n        onToggle={toggleHandler}\r\n        onConfirm={confirmDeletion}\r\n      ></TodoList>\r\n      <ConfirmPopup\r\n        isOpen={confirmPopupOpen}\r\n        onDelete={onDelete}\r\n        onClose={closePopup}\r\n      ></ConfirmPopup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodosPage;\r\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport AboutPage from \"../pages/AboutPage\";\nimport TodosPage from \"../pages/TodosPage\";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Navbar></Navbar>\n      <div className=\"container\">\n        <Switch>\n          <Route component={TodosPage} path=\"/\" exact></Route>\n          <Route component={AboutPage} path=\"/about\"></Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}